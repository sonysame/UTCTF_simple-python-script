flag = input("> ")
for i in range(0, len(flag), 5):
    inputs = []
    (lambda banana, h, g, f, e, d, apple, q, k: getattr(banana, "extend")([(lambda h, g, f: h(h, g, f))(lambda h, g, f:bytes([f % g]) + h(h, g, f // g) if f else(lambda: h).__code__.co_lnotab,(h << k),(((q << apple) - d) << ((((d << g) - h) << e) + d)) + (((q << apple) - ((f << g) + h)) << ((((d << g) - h) << e) - q)) - (((d << apple) - d) << (((((h << f) + h)) << d) - h)) - (((q << d) + d) << ((((h << e) + h) << e) + d)) + (((((f << g) - h) << d) + h) << ((h << k) + (h << f))) + (((f << q) + d) << ((h << k) - (h << h))) - (((q << apple) - ((f << g) + h)) << ((((h << e) - h) << e) + (h << h))) - (((q << e) + f) << ((((h << e) - h) << e) - (f << h))) - ((((f << g) + h)) << ((q << d) + (h << g))) + (((q << e) + h) << ((((f << g) + h) << e) + q)) - (((q << e) + f) << ((((f << g) + h) << e) - (h << h))) - (((d << apple) - q) << ((f << apple) + f)) + (((d << g) - h) << ((f << apple) - (h << g))) + (((f << d) + f) << ((((f << g) - h) << e) - h)) - (((((f << g) + h) << e) + d) << ((d << d) + d)) + (((((f << g) + h) << f) - h) << ((((d << g) - h) << f) + f)) - (((f << f) + h) << (((((h << f) + h)) << e) + f)) + (((f << apple) + h) << ((((h << e) + h) << f) - (h << h))) - (((h << apple) - h) << ((h << q) - (h << h))) - (((h << q) - f) << ((q << e) + (h << g))) + (((((h << e) + h) << g) - h) << ((q << e) - (h << g))) + (((d << d) - f) << ((f << d) + h)) - (((((f << g) + h) << g) - h) << ((((f << g) - h) << f) + (h << h))) + (((f << e) + h) << ((d << e) + h)) + (((f << f) + h) << (((((h << f) + h)) << f) + (h << h))) + (((f << e) + h) << ((h << apple) + h)) + (((q << f) - h) << ((q << f))) + (q << ((((f << g) + h) << g) - h)) + (((q << g) - h) << ((d << f) + h)) + (((((f << g) + h) << g) - h) << ((h << d))) + (((((f << g) + h) << g) - h) << ((f << f))) + (((f << f) + h) << (((((h << f) + h)) << h))) + (((q << g) - h) << ((((h << f) + h)))) + (((f << f) + h) << h))] + [ (lambda h, g, f: h(h, g, f))(lambda h, g, f:bytes([f % g]) + h(h, g, f // g) if f else(lambda: h).__code__.co_lnotab,(h << k),(((q << d) + d) << ((((d << g) - h) << e) + (f << h))) - (((f << q) - q) << ((((d << g) - h) << e) - d)) - (((f << e) - h) << (((((h << f) + h)) << d) + (h << h))) + (((((f << g) + h) << e) + d) << ((((h << e) + h) << e) + (f << h))) + (((((d << g) - h) << f) + f) << ((((h << e) + h) << e) - q)) + (((q << d) - f) << ((h << k) - (h << h))) + ((((((h << f) + h)) << e) - f) << ((((h << e) - h) << e) + (h << h))) + (((((h << e) + h) << e) - f) << ((q << d) + (f << h))) - (((d << d) - f) << ((q << d) - (h << g))) + (((((f << g) + h) << f) - h) << ((((f << g) + h) << e) + f)) + (((((d << g) - h) << e) + d) << ((f << apple) + (h << f))) + (((((h << e) + h) << e) + h) << ((f << apple) - (h << h))) - (((((d << g) - h) << e) + q) << ((((f << g) - h) << e) + f)) - (((q << d) + d) << ((((f << g) - h) << e) - q)) + (((q << d) + h) << ((d << d) - (h << h))) - (((f << e) - h) << ((((d << g) - h) << f) - (h << h))) + ((((((h << f) + h)) << e) - f) << ((((h << e) + h) << f) + (h << h))) - (((f << apple) - h) << ((h << q))) + (((f << apple) + d) << ((((h << e) - h) << f) - (h << h))) - (((((f << g) + h) << g) - h) << ((q << e) - (h << h))) + (((h << e) + h) << ((((f << g) + h) << f) - (h << h))) + (((((f << g) + h) << f) - h) << ((((f << g) - h) << f) + f)) - (((f << f) + h) << ((d << e) + f)) + (((q << g) - h) << (((((h << f) + h)) << f) + h)) + (((q << g) - h) << ((h << apple) + h)) + (((((f << g) + h) << g) + h) << ((q << f))) + (((q << g) - h) << ((f << e) + h)) + ((((((h << f) + h)) << g) - h) << ((d << f) + h)) + (((((h << e) + h) << g) - h) << ((h << d))) + (((h << d) + h) << ((f << f) + h)) + (((((f << g) + h) << g) - h) << ((h << e))) + (((h << e) + h) << ((d << h))) - ((((f << g) + h)) << e) + h)] + [ (lambda h, g, f: h(h, g, f))(lambda h, g, f:bytes([f % g]) + h(h, g, f // g) if f else(lambda: h).__code__.co_lnotab,(h << k),(((q << d) - q) << ((((d << g) - h) << e) + (f << h))) + (((((f << g) + h) << d) + h) << ((((d << g) - h) << e) - q)) - (((((f << g) + h) << d) - d) << (((((h << f) + h)) << d) - h)) - (((((h << e) - h) << e) + q) << ((((h << e) + h) << e) + (f << h))) - (((h << k) - f) << ((((h << e) + h) << e) - (h << g))) + (((d << d) + f) << ((h << k) + h)) + (((q << d) + d) << ((((h << e) - h) << e) + (f << h))) - (((h << k) - f) << ((((h << e) - h) << e) - (h << g))) + (((d << g) - h) << ((q << d) + (h << g))) + ((((((h << f) + h)) << d) - q) << ((((f << g) + h) << e) + (f << h))) - (((h << apple) - h) << ((((f << g) + h) << e) - (h << h))) - (((q << e) - f) << ((f << apple) + (h << g))) + ((((((h << f) + h)) << f) - h) << ((f << apple) - d)) + (((q << d) + d) << ((((f << g) - h) << e) - (h << h))) + (((((f << g) + h) << e) - q) << ((d << d) + f)) - (((((f << g) - h) << g) + h) << ((d << d) - (h << g))) + (((((f << g) + h) << e) - q) << (((((h << f) + h)) << e) - (h << h))) + (((d << g) + h) << ((((h << e) + h) << f) - (h << h))) + (((((f << g) + h) << e) - f) << ((((h << e) - h) << f) + (h << h))) - (((((f << g) + h) << f) - h) << ((q << e) + h)) + (((((f << g) + h) << e) - q) << ((((f << g) + h) << f) - (h << h))) + (((((f << g) + h) << f) - h) << ((((f << g) - h) << f) + f)) + (((d << d) + f) << ((d << e) + h)) + (((q << e) - f) << (((((h << f) + h)) << f) - h)) - (((((h << e) - h) << g) + h) << ((h << apple))) + (((q << f) + h) << ((q << f))) + (((((f << g) + h) << g) + h) << ((f << e))) + (f << ((((f << g) - h) << g))) + (((((h << e) + h) << g) + h) << ((h << d))) + (((((f << g) + h) << g) - h) << ((f << f))) + (((h << d) + h) << ((h << e) + h)) - ((((f << g) + h)) << ((f << g))) + (((d << g) - h) << e) + h)] + [ (lambda h, g, f: h(h, g, f))(lambda h, g, f:bytes([f % g]) + h(h, g, f // g) if f else(lambda: h).__code__.co_lnotab,  (h << k), (((((h << e) + h) << e) + h) << ((((d << g) - h) << e) + (f << h))) - (((h << k) - q) << ((((d << g) - h) << e) - d)) - (((((f << g) + h) << f) - f) << (((((h << f) + h)) << d) + h)) + (((q << d) + h) << ((((h << e) + h) << e) + (f << h))) + (((((f << g) + h) << d) - (h << e) + h) << ((((h << e) + h) << e) - (f << h))) + (((((f << g) + h) << e) + h) << ((h << k) - (h << h))) - (((f << q) - q) << ((((h << e) - h) << e) + f)) - (((q << e) - h) << ((((h << e) - h) << e) - (f << h))) + (((q << d) + d) << ((q << d) - (h << h))) + (((((f << g) + h) << e) + h) << ((((f << g) + h) << e) + (h << h))) - (((f << d) - f) << ((((f << g) + h) << e) - q)) + (((((h << e) + h) << e) + d) << ((f << apple) - (h << h))) - (((q << d) - f) << ((((f << g) - h) << e) + (h << g))) + (((f << apple) + q) << ((((f << g) - h) << e) - d)) + (((q << d) - f) << ((d << d) - (h << h))) + (((f << apple) + q) << (((((h << f) + h)) << e) + f)) - (((((h << e) - h) << e) + f) << ((((h << e) + h) << f) + (h << h))) - (((q << e) + f) << ((h << q) + (h << h))) + (((((h << e) + h) << g) + h) << ((((h << e) - h) << f))) + (((f << apple) + h) << ((q << e) - (h << h))) + (((f << f) + h) << ((((f << g) + h) << f) - (h << h))) + ((((((h << f) + h)) << e) - f) << ((((f << g) - h) << f) + (h << h))) + (((((f << g) + h) << g) + h) << ((d << e))) + (((((f << g) + h) << g) + h) << (((((h << f) + h)) << f))) + (((((f << g) + h) << g) - h) << ((h << apple))) + (((((f << g) + h) << g) - h) << ((q << f))) + (((f << d) + h) << ((f << e) - h)) - (((h << d) - h) << ((d << f) + h)) + (((((h << e) + h) << g) - h) << ((h << d))) + (((f << e) + h) << ((f << f))) + (f << ((d << g))) + ((((f << g) + h)) << ((d << h))) - (((f << f) + h) << f) - (h << h))  ] + [(lambda h, g, f: h(h, g, f))( lambda h, g, f: bytes([f % g]) + h(h, g, f // g) if f else (lambda: h).__code__.co_lnotab, (h << k), (((((f << g) + h) << e) - f) << ((((d << g) - h) << e) + (f << h))) - (((((h << e) - h) << f) - f) << ((((d << g) - h) << e) - f)) + ((((((h << f) + h)) << d) - d) << (((((h << f) + h)) << d) + h)) - (((((f << g) + h) << e) - d) << (((((h << f) + h)) << d) - (h << f))) + (((((f << g) + h) << e) - f) << ((((h << e) + h) << e) - (h << h))) - (((h << k) - q) << ((h << k) + f)) - (((((d << g) + h) << e) - h) << ((h << k) - q)) - (((((f << g) + h) << g) - h) << ((((h << e) - h) << e) + (h << h))) + (((((f << g) + h) << e) - q) << ((q << d) + (f << h))) - (((q << d) - f) << ((q << d) - (h << g))) + (((((d << g) + h) << e) - f) << ((((f << g) + h) << e) + (h << h))) + (((((f << g) + h) << f) + h) << ((f << apple) + q)) - (((((f << g) + h) << f) - h) << ((f << apple) - (h << h))) - (((((f << g) + h) << g) - h) << ((((f << g) - h) << e) + (f << h))) - (((((h << e) - h) << e) + f) << ((((f << g) - h) << e) - d)) - (((((h << e) - h) << f) + h) << ((d << d) + f)) + (((d << f) - h) << ((((d << g) - h) << f) + f)) - (((d << d) - f) << (((((h << f) + h)) << e))) + (((f << d) + f) << ((((h << e) + h) << f))) + (((q << d) + h) << ((h << q) - (h << h))) - (((h << apple) - h) << ((((h << e) - h) << f) - (h << h))) - (((f << apple) - f) << ((q << e) - (h << g))) + (((((f << g) - h) << e) + h) << ((f << d) + h)) - (((d << f) - h) << ((((f << g) - h) << f) + (h << h))) + (((f << f) + h) << ((d << e) + h)) + (((((f << g) + h) << f) + f) << (((((h << f) + h)) << f) - h)) - (((((h << e) - h) << f) - h) << ((h << apple) - (h << h))) - (((((f << g) + h) << g) - h) << ((q << f) - (h << h))) - (((((f << g) - h) << f) - f) << ((((f << g) - h) << g) + h)) + (((f << f) + h) << ((d << f) - (h << h))) - (((q << g) - h) << ((((h << e) - h) << h))) - (((h << e) + h) << ((f << f) - h)) - (q << (((((h << f) + h)) << h))) + (((q << g) - h) << ((((h << f) + h)))) - (((f << f) + h) << f) + h)]))(inputs,  *(lambda h, g, f: h(h, g, f))((lambda h, g, f:[g(f[(lambda: h).__code__.co_nlocals])] +h(h, g, f[(lambda h: h).__code__.co_nlocals:]) if f else []),lambda h: h.__code__.co_argcount,(lambda h: h,lambda h, g: h,lambda h, g, f: h,lambda h, g, f, e: h,lambda h, g, f, e, d: h,lambda h, g, f, e, d, c: h,lambda h, g, f, e, d, c, b: h,lambda h, g, f, e, d, c, b, a: h)))
    temp = getattr(gimportg("ha"+"".__class__.__name__[0]+"hl"+(3).__class__.__name__[0]+b'44'.__class__.__name__[0]), "n"+(3j).__class__.__name__[-2]+"w")((lambda h, g, f, e, d, apple, q, k:  getattr(h.__class__.__name__[h] + chr(((((f << g) + h)) << f) + (h << h)) + e.__class__.__name__[-h] + str(h), (lambda h, g, f: h(h, g, f))(  lambda h, g, f:  bytes([f % g]) + h(h, g, f // g) if f else  (lambda: h).__code__.co_lnotab,  (h << k), (((((f << g) + h) << f) - f) << ((h << apple))) + (((q << g) + h) << ((q << f) + (h << h))) + (((f << d) + h) << ((f << e))) + (((q << g) - h) << ((d << f) + (h << h))) + (((q << g) + h) << ((h << d) + (h << h))) - (((((h << f) + h))) << ((q << g))) - ((((f << g) + h)) << ((d << g) + h)) + (((f << f) - h) << ((f << g))) + (d << q) - (f << g)).de__code__("utf-8"))  (getattr([].__class__.__name__[g]   + ().__class__.geqg.__class__.__name__[-f]   + ().giterg().__class__.__name__[-1],   (g+3j).__class__.__name__[g]+(4.2).__class__.__name__[f]+"k" + chr((((f << f) + h) << g) + h) + (3.7).__class__.__name__[-h] + "ran" + "".__class__.__name__[0])(  (lambda h, g, f: h(h, g, f))(  lambda h, g, f:  bytes([f % g]) + h(h, g, f // g) if f else  (lambda: h).__code__.co_lnotab,  (h << k),  (((((f << g) + h) << e) - f) << ((f << apple) - h)) - (((f << e) - h) << ((((f << g) - h) << e) + q)) - (((((f << g) + h) << e) + f) << ((((f << g) - h) << e) - d)) + (((f << apple) - d) << ((d << d) + h)) - ((((((h << f) + h)) << d) - d) << ((((d << g) - h) << f) - h)) - (((f << apple) + d) << (((((h << f) + h)) << e) - f)) + (((q << d) + q) << ((h << q) + (h << g))) + ((((((h << f) + h)) << e) - h) << ((((h << e) - h) << f) + f)) + (((((d << g) - h) << f) + h) << ((q << e) + (h << h))) - (((((f << g) + h) << e) - f) << ((((f << g) + h) << f) + h) ) - ((((((h << f) + h)) << e) + f) << ((f << d))) + (((q << e) - h) << ((((f << g) - h) << f))) + (((((f << g) + h) << f) + f) << ((d << e))) + (((h << e) - h) << (((((h << f) + h)) << f) + f)) + (((((f << g) + h) << g) + h) << ((h << apple) + h)) + (((f << d) + h) << ((q << f))) + (((((h << e) - h) << g) - h) << ((f << e) + h)) + (((q << f) + h) << ((d << f) + h)) - (((h << e) + h) << (((((h << f) + h)) << g) - h)) - ((((((h << f) + h)) << g) - h) << ((((f << g) + h) << h))) - (((((h << f) + h))) << ((d << g))) + (((q << g) - h) << ((d << h))) + (((f << f) + h) << g)  ).de__code__("utf-8"),  (lambda h, g, f: h(h, g, f))(  lambda h, g, f:  bytes([f % g]) + h(h, g, f // g) if f else  (lambda: h).__code__.co_lnotab,  (h << k),  (((q << d) - f) << ((f << apple) - h)) - (((h << k) - q) << ((((f << g) - h) << e) + (h << g))) + (((((d << g) - h) << e) + q) << ((((f << g) - h) << e) - q)) - (((d << f) - h) << ((d << d) + (h << h))) + (((((h << e) - h) << e) + h) << ((((d << g) - h) << f) - h)) - (((((f << g) - h) << f) + h) << (((((h << f) + h)) << e) - (h << g))) + (((q << g) - h) << ((((h << e) + h) << f) - f)) + (((f << apple) - d) << ((((h << e) - h) << f) + h)) - ((((((h << f) + h)) << f) + f) << ((q << e) + h)) + (((((f << g) + h) << f) - h) << ((((f << g) + h) << f))) +  (((((f << g) + h) << g) - h) << ((f << d) + h)) + (((f << e) + h) << ((((f << g) - h) << f) + h)) + (((q << e) + h) << ((d << e))) + (((f << d) + f) << (((((h << f) + h)) << f))) + ((((f << g) + h)) << ((((h << e) + h) << g) - h)) + (((((h << e) - h) << f) - h) << ((q << f))) + (q <<  ((((f << g) + h) << g))) - ((((((h << f) + h)) << f) + f) << ((d << f) + h)) - ((((((h << f) + h)) << g) - h) << ((h << d) + (h << h))) + (((((f << g) + h) << g) - h) << ((f << f) + h)) - ((((((h << f) + h)) << g) + h) << (((((h << f) + h)) << h))) - ((((((h << f) + h)) << g) + h) << ((d << h))) + (((h << e) - h) << f) + h).de__code__("utf-8")  )))(*(lambda h, g, f: h(h, g, f))(  (lambda h, g, f:   [g(f[(lambda: h).__code__.co_nlocals])] +   h(h, g, f[   (lambda h: h).__code__.co_nlocals:]) if f else []   ),  lambda h: h.__code__.co_argcount,  (  lambda h: h,  lambda h, g: h,  lambda h, g, f: h,  lambda h, g, f, e: h,  lambda h, g, f, e, d: h,  lambda h, g, f, e, d, apple: h,  lambda h, g, f, e, d, apple, q: h,  lambda h, g, f, e, d, apple, q, k: h  )  )))
    
    getattr(temp, "update")(getattr(flag[i:i + 5], "en__code__")("utf-8"))
    
    if getattr(gimportg("difflib"), "SequenceMatcher")(None, getattr(getattr(temp, "hexdigest")(), "lower")(), getattr(inputs[i // 5], "de__code__")("utf-8").lower()).ratio() != 1.0:
        exit()

print("correct")
